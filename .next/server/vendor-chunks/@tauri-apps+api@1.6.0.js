"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tauri-apps+api@1.6.0";
exports.ids = ["vendor-chunks/@tauri-apps+api@1.6.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/@tauri-apps+api@1.6.0/node_modules/@tauri-apps/api/tauri.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/.pnpm/@tauri-apps+api@1.6.0/node_modules/@tauri-apps/api/tauri.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertFileSrc: () => (/* binding */ convertFileSrc),\n/* harmony export */   invoke: () => (/* binding */ invoke),\n/* harmony export */   transformCallback: () => (/* binding */ transformCallback)\n/* harmony export */ });\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nfunction uid() {\n    return window.crypto.getRandomValues(new Uint32Array(1))[0];\n}\n/**\n * Transforms a callback function to a string identifier that can be passed to the backend.\n * The backend uses the identifier to `eval()` the callback.\n *\n * @return A unique identifier associated with the callback function.\n *\n * @since 1.0.0\n */\nfunction transformCallback(callback, once = false) {\n    const identifier = uid();\n    const prop = `_${identifier}`;\n    Object.defineProperty(window, prop, {\n        value: (result) => {\n            if (once) {\n                Reflect.deleteProperty(window, prop);\n            }\n            return callback === null || callback === void 0 ? void 0 : callback(result);\n        },\n        writable: false,\n        configurable: true\n    });\n    return identifier;\n}\n/**\n * Sends a message to the backend.\n * @example\n * ```typescript\n * import { invoke } from '@tauri-apps/api/tauri';\n * await invoke('login', { user: 'tauri', password: 'poiwe3h4r5ip3yrhtew9ty' });\n * ```\n *\n * @param cmd The command name.\n * @param args The optional arguments to pass to the command.\n * @return A promise resolving or rejecting to the backend response.\n *\n * @since 1.0.0\n */\nasync function invoke(cmd, args = {}) {\n    return new Promise((resolve, reject) => {\n        const callback = transformCallback((e) => {\n            resolve(e);\n            Reflect.deleteProperty(window, `_${error}`);\n        }, true);\n        const error = transformCallback((e) => {\n            reject(e);\n            Reflect.deleteProperty(window, `_${callback}`);\n        }, true);\n        window.__TAURI_IPC__({\n            cmd,\n            callback,\n            error,\n            ...args\n        });\n    });\n}\n/**\n * Convert a device file path to an URL that can be loaded by the webview.\n * Note that `asset:` and `https://asset.localhost` must be added to [`tauri.security.csp`](https://tauri.app/v1/api/config/#securityconfig.csp) in `tauri.conf.json`.\n * Example CSP value: `\"csp\": \"default-src 'self'; img-src 'self' asset: https://asset.localhost\"` to use the asset protocol on image sources.\n *\n * Additionally, `asset` must be added to [`tauri.allowlist.protocol`](https://tauri.app/v1/api/config/#allowlistconfig.protocol)\n * in `tauri.conf.json` and its access scope must be defined on the `assetScope` array on the same `protocol` object.\n * For example:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"protocol\": {\n *         \"asset\": true,\n *         \"assetScope\": [\"$APPDATA/assets/*\"]\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param  filePath The file path.\n * @param  protocol The protocol to use. Defaults to `asset`. You only need to set this when using a custom protocol.\n * @example\n * ```typescript\n * import { appDataDir, join } from '@tauri-apps/api/path';\n * import { convertFileSrc } from '@tauri-apps/api/tauri';\n * const appDataDirPath = await appDataDir();\n * const filePath = await join(appDataDirPath, 'assets/video.mp4');\n * const assetUrl = convertFileSrc(filePath);\n *\n * const video = document.getElementById('my-video');\n * const source = document.createElement('source');\n * source.type = 'video/mp4';\n * source.src = assetUrl;\n * video.appendChild(source);\n * video.load();\n * ```\n *\n * @return the URL that can be used as source on the webview.\n *\n * @since 1.0.0\n */\nfunction convertFileSrc(filePath, protocol = 'asset') {\n    return window.__TAURI__.convertFileSrc(filePath, protocol);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDEuNi4wL25vZGVfbW9kdWxlcy9AdGF1cmktYXBwcy9hcGkvdGF1cmkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixXQUFXO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksU0FBUztBQUNyQiwyQkFBMkIsbURBQW1EO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLE1BQU07QUFDckQsU0FBUztBQUNUO0FBQ0E7QUFDQSwrQ0FBK0MsU0FBUztBQUN4RCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxtQkFBbUI7QUFDL0IsWUFBWSxpQkFBaUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRXFEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3FpbXAvLi9ub2RlX21vZHVsZXMvLnBucG0vQHRhdXJpLWFwcHMrYXBpQDEuNi4wL25vZGVfbW9kdWxlcy9AdGF1cmktYXBwcy9hcGkvdGF1cmkuanM/NWU5YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzIFRhdXJpIFByb2dyYW1tZSB3aXRoaW4gVGhlIENvbW1vbnMgQ29uc2VydmFuY3lcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogTUlUXG4vKiogQGlnbm9yZSAqL1xuZnVuY3Rpb24gdWlkKCkge1xuICAgIHJldHVybiB3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDMyQXJyYXkoMSkpWzBdO1xufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gYSBzdHJpbmcgaWRlbnRpZmllciB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gdGhlIGJhY2tlbmQuXG4gKiBUaGUgYmFja2VuZCB1c2VzIHRoZSBpZGVudGlmaWVyIHRvIGBldmFsKClgIHRoZSBjYWxsYmFjay5cbiAqXG4gKiBAcmV0dXJuIEEgdW5pcXVlIGlkZW50aWZpZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtQ2FsbGJhY2soY2FsbGJhY2ssIG9uY2UgPSBmYWxzZSkge1xuICAgIGNvbnN0IGlkZW50aWZpZXIgPSB1aWQoKTtcbiAgICBjb25zdCBwcm9wID0gYF8ke2lkZW50aWZpZXJ9YDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCBwcm9wLCB7XG4gICAgICAgIHZhbHVlOiAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAob25jZSkge1xuICAgICAgICAgICAgICAgIFJlZmxlY3QuZGVsZXRlUHJvcGVydHkod2luZG93LCBwcm9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayA9PT0gbnVsbCB8fCBjYWxsYmFjayA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2FsbGJhY2socmVzdWx0KTtcbiAgICAgICAgfSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gaWRlbnRpZmllcjtcbn1cbi8qKlxuICogU2VuZHMgYSBtZXNzYWdlIHRvIHRoZSBiYWNrZW5kLlxuICogQGV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IGludm9rZSB9IGZyb20gJ0B0YXVyaS1hcHBzL2FwaS90YXVyaSc7XG4gKiBhd2FpdCBpbnZva2UoJ2xvZ2luJywgeyB1c2VyOiAndGF1cmknLCBwYXNzd29yZDogJ3BvaXdlM2g0cjVpcDN5cmh0ZXc5dHknIH0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGNtZCBUaGUgY29tbWFuZCBuYW1lLlxuICogQHBhcmFtIGFyZ3MgVGhlIG9wdGlvbmFsIGFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBjb21tYW5kLlxuICogQHJldHVybiBBIHByb21pc2UgcmVzb2x2aW5nIG9yIHJlamVjdGluZyB0byB0aGUgYmFja2VuZCByZXNwb25zZS5cbiAqXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gaW52b2tlKGNtZCwgYXJncyA9IHt9KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSB0cmFuc2Zvcm1DYWxsYmFjaygoZSkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZShlKTtcbiAgICAgICAgICAgIFJlZmxlY3QuZGVsZXRlUHJvcGVydHkod2luZG93LCBgXyR7ZXJyb3J9YCk7XG4gICAgICAgIH0sIHRydWUpO1xuICAgICAgICBjb25zdCBlcnJvciA9IHRyYW5zZm9ybUNhbGxiYWNrKChlKSA9PiB7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHdpbmRvdywgYF8ke2NhbGxiYWNrfWApO1xuICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgd2luZG93Ll9fVEFVUklfSVBDX18oe1xuICAgICAgICAgICAgY21kLFxuICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgIC4uLmFyZ3NcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBkZXZpY2UgZmlsZSBwYXRoIHRvIGFuIFVSTCB0aGF0IGNhbiBiZSBsb2FkZWQgYnkgdGhlIHdlYnZpZXcuXG4gKiBOb3RlIHRoYXQgYGFzc2V0OmAgYW5kIGBodHRwczovL2Fzc2V0LmxvY2FsaG9zdGAgbXVzdCBiZSBhZGRlZCB0byBbYHRhdXJpLnNlY3VyaXR5LmNzcGBdKGh0dHBzOi8vdGF1cmkuYXBwL3YxL2FwaS9jb25maWcvI3NlY3VyaXR5Y29uZmlnLmNzcCkgaW4gYHRhdXJpLmNvbmYuanNvbmAuXG4gKiBFeGFtcGxlIENTUCB2YWx1ZTogYFwiY3NwXCI6IFwiZGVmYXVsdC1zcmMgJ3NlbGYnOyBpbWctc3JjICdzZWxmJyBhc3NldDogaHR0cHM6Ly9hc3NldC5sb2NhbGhvc3RcImAgdG8gdXNlIHRoZSBhc3NldCBwcm90b2NvbCBvbiBpbWFnZSBzb3VyY2VzLlxuICpcbiAqIEFkZGl0aW9uYWxseSwgYGFzc2V0YCBtdXN0IGJlIGFkZGVkIHRvIFtgdGF1cmkuYWxsb3dsaXN0LnByb3RvY29sYF0oaHR0cHM6Ly90YXVyaS5hcHAvdjEvYXBpL2NvbmZpZy8jYWxsb3dsaXN0Y29uZmlnLnByb3RvY29sKVxuICogaW4gYHRhdXJpLmNvbmYuanNvbmAgYW5kIGl0cyBhY2Nlc3Mgc2NvcGUgbXVzdCBiZSBkZWZpbmVkIG9uIHRoZSBgYXNzZXRTY29wZWAgYXJyYXkgb24gdGhlIHNhbWUgYHByb3RvY29sYCBvYmplY3QuXG4gKiBGb3IgZXhhbXBsZTpcbiAqIGBgYGpzb25cbiAqIHtcbiAqICAgXCJ0YXVyaVwiOiB7XG4gKiAgICAgXCJhbGxvd2xpc3RcIjoge1xuICogICAgICAgXCJwcm90b2NvbFwiOiB7XG4gKiAgICAgICAgIFwiYXNzZXRcIjogdHJ1ZSxcbiAqICAgICAgICAgXCJhc3NldFNjb3BlXCI6IFtcIiRBUFBEQVRBL2Fzc2V0cy8qXCJdXG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gIGZpbGVQYXRoIFRoZSBmaWxlIHBhdGguXG4gKiBAcGFyYW0gIHByb3RvY29sIFRoZSBwcm90b2NvbCB0byB1c2UuIERlZmF1bHRzIHRvIGBhc3NldGAuIFlvdSBvbmx5IG5lZWQgdG8gc2V0IHRoaXMgd2hlbiB1c2luZyBhIGN1c3RvbSBwcm90b2NvbC5cbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBhcHBEYXRhRGlyLCBqb2luIH0gZnJvbSAnQHRhdXJpLWFwcHMvYXBpL3BhdGgnO1xuICogaW1wb3J0IHsgY29udmVydEZpbGVTcmMgfSBmcm9tICdAdGF1cmktYXBwcy9hcGkvdGF1cmknO1xuICogY29uc3QgYXBwRGF0YURpclBhdGggPSBhd2FpdCBhcHBEYXRhRGlyKCk7XG4gKiBjb25zdCBmaWxlUGF0aCA9IGF3YWl0IGpvaW4oYXBwRGF0YURpclBhdGgsICdhc3NldHMvdmlkZW8ubXA0Jyk7XG4gKiBjb25zdCBhc3NldFVybCA9IGNvbnZlcnRGaWxlU3JjKGZpbGVQYXRoKTtcbiAqXG4gKiBjb25zdCB2aWRlbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteS12aWRlbycpO1xuICogY29uc3Qgc291cmNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc291cmNlJyk7XG4gKiBzb3VyY2UudHlwZSA9ICd2aWRlby9tcDQnO1xuICogc291cmNlLnNyYyA9IGFzc2V0VXJsO1xuICogdmlkZW8uYXBwZW5kQ2hpbGQoc291cmNlKTtcbiAqIHZpZGVvLmxvYWQoKTtcbiAqIGBgYFxuICpcbiAqIEByZXR1cm4gdGhlIFVSTCB0aGF0IGNhbiBiZSB1c2VkIGFzIHNvdXJjZSBvbiB0aGUgd2Vidmlldy5cbiAqXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZnVuY3Rpb24gY29udmVydEZpbGVTcmMoZmlsZVBhdGgsIHByb3RvY29sID0gJ2Fzc2V0Jykge1xuICAgIHJldHVybiB3aW5kb3cuX19UQVVSSV9fLmNvbnZlcnRGaWxlU3JjKGZpbGVQYXRoLCBwcm90b2NvbCk7XG59XG5cbmV4cG9ydCB7IGNvbnZlcnRGaWxlU3JjLCBpbnZva2UsIHRyYW5zZm9ybUNhbGxiYWNrIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@tauri-apps+api@1.6.0/node_modules/@tauri-apps/api/tauri.js\n");

/***/ })

};
;